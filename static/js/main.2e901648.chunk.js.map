{"version":3,"sources":["components/SeriesForm.js","App.js","reportWebVitals.js","index.js"],"names":["SeriesForm","props","expireDate","useRef","useState","output","setOutput","onSubmit","event","preventDefault","expireDateYYYYMMDD","intValue","parseInt","isNaN","monthday","Math","trunc","toString","padStart","getDate","current","value","err","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLA2CeA,MAzCf,SAAoBC,GAClB,IAAIC,EAAaC,mBACjB,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KA0BA,OACE,8BACE,uBAAMC,SAZV,SAAuBC,GACrBA,EAAMC,iBACN,IACE,IAAIC,EAjBR,SAAiBR,GACf,IAAIS,EAAWC,SAASV,EAAY,IACpC,GAAIW,MAAMF,GACR,KAAM,mCAER,IACIG,EAAWH,EAAW,IAK1B,MAAO,IANKI,KAAKC,MAAML,EAAW,KAAO,MAAMM,WAAWC,SAAS,EAAG,KAE1DH,KAAKC,MAAMF,EAAW,IAC/BG,WACAC,SAAS,EAAG,MACJJ,EAAW,IAAIG,WAAWC,SAAS,EAAG,KAOtBC,CAAQjB,EAAWkB,QAAQC,OACpDf,EAAU,cAAgBI,GAC1B,MAAOY,GACPhB,EAAUgB,KAMV,UACE,4DACA,uBAAOC,IAAKrB,IACZ,2CACA,sBACCG,QC3BMmB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACC,cAAC,EAAD,OCOUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2e901648.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\n\nfunction SeriesForm(props) {\n  var expireDate = useRef();\n  const [output, setOutput] = useState(\"\");\n\n  function getDate(expireDate) {\n    var intValue = parseInt(expireDate, 10);\n    if (isNaN(intValue)) {\n      throw \"Invalid series expiredate number\";\n    }\n    var year = (Math.trunc(intValue / 512) + 1989).toString().padStart(4, \"0\");\n    var monthday = intValue % 512;\n    var month = Math.trunc(monthday / 32)\n      .toString()\n      .padStart(2, \"0\");\n    var day = (monthday % 32).toString().padStart(2, \"0\");\n    return \"\" + year + month + day;\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    try {\n      var expireDateYYYYMMDD = getDate(expireDate.current.value);\n      setOutput(\"EXPIREDATE=\" + expireDateYYYYMMDD);\n    } catch (err) {\n      setOutput(err);\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={submitHandler}>\n        <label>ExpireDate from series:</label>\n        <input ref={expireDate} />\n        <button>Check</button>\n        <p />\n        {output}\n      </form>\n    </div>\n  );\n}\n\nexport default SeriesForm;\n","import SeriesForm from './components/SeriesForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <SeriesForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}